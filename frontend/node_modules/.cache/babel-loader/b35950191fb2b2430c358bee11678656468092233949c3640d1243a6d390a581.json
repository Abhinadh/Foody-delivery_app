{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhin\\\\Desktop\\\\GitHub\\\\Foody\\\\frontend\\\\src\\\\pages\\\\Modal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../styles/Modal.css\";\nimport { useUser } from \"../context/UserContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport image from \"../assets/medium-shot-cartoonish-boy-with-burger.jpg\";\nimport { FaUser, FaUtensils, FaMotorcycle } from \"react-icons/fa\";\nimport SuccessModal from \"./Successmodal\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyCPfWpbibiw83RQsxELttr0vL9Ic64Sf9s\";\nconst Modal = ({\n  modalType,\n  setModalType,\n  setShowModal\n}) => {\n  _s();\n  const [credentials, setCredentials] = useState({});\n  const [selectedRole, setSelectedRole] = useState(null);\n  const {\n    setUser\n  } = useUser();\n  const navigate = useNavigate();\n  const [map, setMap] = useState(null);\n  const [marker, setMarker] = useState(null);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [validationAlert, setValidationAlert] = useState(null);\n\n  // Handle input change\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCredentials({\n      ...credentials,\n      [name]: value\n    });\n  };\n\n  // Reset form\n  const resetForm = () => {\n    setCredentials({});\n    setSelectedRole(null);\n    setValidationAlert(null);\n\n    // Reset form fields\n    const formElements = document.querySelectorAll('input');\n    formElements.forEach(element => {\n      element.value = '';\n    });\n\n    // Clear map marker if exists\n    if (marker) {\n      marker.setMap(null);\n      setMarker(null);\n    }\n  };\n\n  // Validate password - only needed for signup\n  const validatePassword = password => {\n    const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9]).{8,}$/;\n    return passwordRegex.test(password);\n  };\n\n  // Validate phone - only needed for signup\n  const validatePhone = phone => {\n    const phoneRegex = /^[0-9]{10}$/;\n    return phoneRegex.test(phone);\n  };\n\n  // Validate form before submission - only for signup\n  const validateForm = () => {\n    // Skip validation for login\n    if (modalType === \"login\") {\n      return true;\n    }\n\n    // For signup, perform validation\n    if (!credentials.email || !credentials.email.includes('@')) {\n      setValidationAlert(\"Please enter a valid email address\");\n      return false;\n    }\n    if (!validatePassword(credentials.password)) {\n      setValidationAlert(\"Password must be at least 8 characters with a capital letter, number, and special character\");\n      return false;\n    }\n    if (!credentials.name || credentials.name.trim() === \"\") {\n      setValidationAlert(\"Name is required\");\n      return false;\n    }\n    if (selectedRole === \"user\" && !validatePhone(credentials.phone)) {\n      setValidationAlert(\"Phone number must be exactly 10 digits\");\n      return false;\n    }\n    if (selectedRole === \"restaurant\" && !credentials.address) {\n      setValidationAlert(\"Please select a location for your restaurant\");\n      return false;\n    }\n    return true;\n  };\n\n  // Initialize Google Maps and Autocomplete\n  useEffect(() => {\n    if (selectedRole === \"restaurant\") {\n      const loadGoogleMapsScript = () => {\n        if (!window.google) {\n          const script = document.createElement(\"script\");\n          script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places`;\n          script.async = true;\n          script.defer = true;\n          script.onload = initializeMap;\n          document.head.appendChild(script);\n        } else {\n          initializeMap();\n        }\n      };\n      const initializeMap = () => {\n        const defaultLocation = {\n          lat: 10.0,\n          lng: 76.0\n        };\n        const mapInstance = new window.google.maps.Map(document.getElementById(\"map\"), {\n          center: defaultLocation,\n          zoom: 12\n        });\n        const input = document.getElementById(\"autocomplete\");\n        const autocomplete = new window.google.maps.places.Autocomplete(input);\n        autocomplete.addListener(\"place_changed\", () => {\n          const place = autocomplete.getPlace();\n          if (place.geometry) {\n            const lat = place.geometry.location.lat();\n            const lng = place.geometry.location.lng();\n            setCredentials(prev => ({\n              ...prev,\n              address: place.formatted_address,\n              latitude: lat,\n              longitude: lng\n            }));\n            mapInstance.setCenter({\n              lat,\n              lng\n            });\n            mapInstance.setZoom(15);\n            if (marker) marker.setMap(null); // Remove previous marker\n\n            const newMarker = new window.google.maps.Marker({\n              position: {\n                lat,\n                lng\n              },\n              map: mapInstance\n            });\n            setMarker(newMarker);\n          }\n        });\n        setMap(mapInstance);\n      };\n      loadGoogleMapsScript();\n    }\n  }, [selectedRole]);\n\n  // Clear form when modalType changes\n  useEffect(() => {\n    resetForm();\n  }, [modalType]);\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate form before submission - only for signup\n    if (!validateForm()) {\n      return;\n    }\n    try {\n      if (modalType === \"login\") {\n        const res = await axios.post(`http://localhost:5000/api/auth/login`, credentials);\n        setUser({\n          id: res.data.account._id,\n          email: res.data.account.email,\n          role: res.data.account.role\n        });\n        setShowSuccessModal(\"login\");\n        setTimeout(() => {\n          setShowModal(false);\n          navigate(`/dashboard/${res.data.account.role}`);\n        }, 2000);\n      } else {\n        await axios.post(`http://localhost:5000/api/auth/register`, {\n          ...credentials,\n          role: selectedRole\n        });\n        setShowSuccessModal(\"signup\");\n        setTimeout(() => {\n          resetForm();\n          setModalType(\"login\");\n          setShowSuccessModal(false);\n        }, 2000);\n      }\n    } catch (err) {\n      alert(\"Error: \" + (err.response ? err.response.data.message : err.message));\n    }\n  };\n\n  // Handle password input change with validation\n  const handlePasswordChange = e => {\n    const value = e.target.value;\n    handleChange(e);\n\n    // Only validate password during signup\n    if (modalType === \"signup\" && value.length > 0 && !validatePassword(value)) {\n      setValidationAlert(\"Password must be at least 8 characters with a capital letter, number, and special character\");\n    } else {\n      setValidationAlert(null);\n    }\n  };\n\n  // Handle phone input change with validation\n  const handlePhoneChange = e => {\n    // Only allow numeric input\n    const value = e.target.value.replace(/\\D/g, '');\n\n    // Update form state with cleaned value\n    setCredentials({\n      ...credentials,\n      phone: value\n    });\n\n    // Update input field with cleaned value\n    e.target.value = value;\n\n    // Only validate phone during signup\n    if (modalType === \"signup\" && value.length > 0 && value.length !== 10) {\n      setValidationAlert(\"Phone number must be exactly 10 digits\");\n    } else {\n      setValidationAlert(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showSuccessModal && /*#__PURE__*/_jsxDEV(SuccessModal, {\n      type: showSuccessModal,\n      onClose: () => setShowSuccessModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay-xjkl\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container-xjkl\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-image-xjkl\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: image,\n            alt: \"Illustration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content-xjkl\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"close-btn-xjkl\",\n            onClick: () => setShowModal(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: modalType === \"login\" ? \"Login\" : \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this), validationAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"validation-alert\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: validationAlert\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setValidationAlert(null),\n              children: \"OK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 29\n          }, this), modalType === \"signup\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"role-selection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Select Role:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"role-icons\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: `role-icon ${selectedRole === \"user\" ? \"selected\" : \"\"}`,\n                onClick: () => setSelectedRole(\"user\"),\n                children: [/*#__PURE__*/_jsxDEV(FaUser, {\n                  size: 40\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"User\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `role-icon ${selectedRole === \"restaurant\" ? \"selected\" : \"\"}`,\n                onClick: () => setSelectedRole(\"restaurant\"),\n                children: [/*#__PURE__*/_jsxDEV(FaUtensils, {\n                  size: 40\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Restaurant\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `role-icon ${selectedRole === \"deliveryboy\" ? \"selected\" : \"\"}`,\n                onClick: () => setSelectedRole(\"deliveryboy\"),\n                children: [/*#__PURE__*/_jsxDEV(FaMotorcycle, {\n                  size: 40\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Delivery Boy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 29\n          }, this), modalType === \"signup\" && !selectedRole ? /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textAlign: \"center\",\n              color: \"red\"\n            },\n            children: \"Please select a role to continue.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              name: \"email\",\n              placeholder: \"Email\",\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              name: \"password\",\n              placeholder: \"Password\",\n              onChange: handlePasswordChange,\n              onBlur: e => {\n                // Only validate password during signup\n                if (modalType === \"signup\" && e.target.value.length > 0 && !validatePassword(e.target.value)) {\n                  setValidationAlert(\"Password must be at least 8 characters with a capital letter, number, and special character\");\n                }\n              },\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 33\n            }, this), modalType === \"signup\" && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              placeholder: \"Full Name\",\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 37\n            }, this), modalType === \"signup\" && selectedRole === \"user\" && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"phone\",\n              placeholder: \"Phone number (10 digits)\",\n              onChange: handlePhoneChange,\n              onBlur: e => {\n                if (e.target.value.length > 0 && !validatePhone(e.target.value)) {\n                  setValidationAlert(\"Phone number must be exactly 10 digits\");\n                }\n              },\n              maxLength: \"10\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 37\n            }, this), modalType === \"signup\" && selectedRole === \"restaurant\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"map-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Select Your Restaurant Location:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"autocomplete\",\n                type: \"text\",\n                placeholder: \"Search for your location...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"map\",\n                style: {\n                  width: \"100%\",\n                  height: \"300px\",\n                  marginTop: \"10px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 41\n              }, this), credentials.address && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Address:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 331,\n                  columnNumber: 68\n                }, this), \" \", credentials.address]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 65\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 37\n            }, this), selectedRole === \"deliveryboy\" && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"assignedRegion\",\n              placeholder: \"Assigned Region\",\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              disabled: modalType === \"signup\" && !selectedRole,\n              children: modalType === \"login\" ? \"Login\" : `Sign Up as ${selectedRole ? selectedRole.charAt(0).toUpperCase() + selectedRole.slice(1) : \"?\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [modalType === \"login\" ? \"New here?\" : \"Already have an account?\", /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => setModalType(modalType === \"login\" ? \"signup\" : \"login\"),\n              children: modalType === \"login\" ? \" Create an account\" : \" Log in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Modal, \"qSrJMX6hgs6JJo33lD8sqSD/1ig=\", false, function () {\n  return [useUser, useNavigate];\n});\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["useState","useEffect","axios","useUser","useNavigate","image","FaUser","FaUtensils","FaMotorcycle","SuccessModal","jsxDEV","_jsxDEV","Fragment","_Fragment","GOOGLE_MAPS_API_KEY","Modal","modalType","setModalType","setShowModal","_s","credentials","setCredentials","selectedRole","setSelectedRole","setUser","navigate","map","setMap","marker","setMarker","showSuccessModal","setShowSuccessModal","validationAlert","setValidationAlert","handleChange","e","name","value","target","resetForm","formElements","document","querySelectorAll","forEach","element","validatePassword","password","passwordRegex","test","validatePhone","phone","phoneRegex","validateForm","email","includes","trim","address","loadGoogleMapsScript","window","google","script","createElement","src","async","defer","onload","initializeMap","head","appendChild","defaultLocation","lat","lng","mapInstance","maps","Map","getElementById","center","zoom","input","autocomplete","places","Autocomplete","addListener","place","getPlace","geometry","location","prev","formatted_address","latitude","longitude","setCenter","setZoom","newMarker","Marker","position","handleSubmit","preventDefault","res","post","id","data","account","_id","role","setTimeout","err","alert","response","message","handlePasswordChange","length","handlePhoneChange","replace","children","type","onClose","fileName","_jsxFileName","lineNumber","columnNumber","className","alt","onClick","size","style","textAlign","color","onSubmit","placeholder","onChange","required","onBlur","maxLength","width","height","marginTop","disabled","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["C:/Users/abhin/Desktop/GitHub/Foody/frontend/src/pages/Modal.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../styles/Modal.css\";\r\nimport { useUser } from \"../context/UserContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport image from \"../assets/medium-shot-cartoonish-boy-with-burger.jpg\";\r\nimport { FaUser, FaUtensils, FaMotorcycle } from \"react-icons/fa\";\r\nimport SuccessModal from \"./Successmodal\";\r\n\r\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyCPfWpbibiw83RQsxELttr0vL9Ic64Sf9s\";\r\n\r\nconst Modal = ({ modalType, setModalType, setShowModal }) => {\r\n    const [credentials, setCredentials] = useState({});\r\n    const [selectedRole, setSelectedRole] = useState(null);\r\n    const { setUser } = useUser();\r\n    const navigate = useNavigate();\r\n    const [map, setMap] = useState(null);\r\n    const [marker, setMarker] = useState(null);\r\n    const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n    const [validationAlert, setValidationAlert] = useState(null);\r\n\r\n    // Handle input change\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setCredentials({ ...credentials, [name]: value });\r\n    };\r\n\r\n    // Reset form\r\n    const resetForm = () => {\r\n        setCredentials({});\r\n        setSelectedRole(null);\r\n        setValidationAlert(null);\r\n        \r\n        // Reset form fields\r\n        const formElements = document.querySelectorAll('input');\r\n        formElements.forEach(element => {\r\n            element.value = '';\r\n        });\r\n        \r\n        // Clear map marker if exists\r\n        if (marker) {\r\n            marker.setMap(null);\r\n            setMarker(null);\r\n        }\r\n    };\r\n\r\n    // Validate password - only needed for signup\r\n    const validatePassword = (password) => {\r\n        const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9]).{8,}$/;\r\n        return passwordRegex.test(password);\r\n    };\r\n    \r\n    // Validate phone - only needed for signup\r\n    const validatePhone = (phone) => {\r\n        const phoneRegex = /^[0-9]{10}$/;\r\n        return phoneRegex.test(phone);\r\n    };\r\n\r\n    // Validate form before submission - only for signup\r\n    const validateForm = () => {\r\n        // Skip validation for login\r\n        if (modalType === \"login\") {\r\n            return true;\r\n        }\r\n        \r\n        // For signup, perform validation\r\n        if (!credentials.email || !credentials.email.includes('@')) {\r\n            setValidationAlert(\"Please enter a valid email address\");\r\n            return false;\r\n        }\r\n        \r\n        if (!validatePassword(credentials.password)) {\r\n            setValidationAlert(\"Password must be at least 8 characters with a capital letter, number, and special character\");\r\n            return false;\r\n        }\r\n        \r\n        if (!credentials.name || credentials.name.trim() === \"\") {\r\n            setValidationAlert(\"Name is required\");\r\n            return false;\r\n        }\r\n        \r\n        if (selectedRole === \"user\" && !validatePhone(credentials.phone)) {\r\n            setValidationAlert(\"Phone number must be exactly 10 digits\");\r\n            return false;\r\n        }\r\n        \r\n        if (selectedRole === \"restaurant\" && !credentials.address) {\r\n            setValidationAlert(\"Please select a location for your restaurant\");\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    };\r\n\r\n    // Initialize Google Maps and Autocomplete\r\n    useEffect(() => {\r\n        if (selectedRole === \"restaurant\") {\r\n            const loadGoogleMapsScript = () => {\r\n                if (!window.google) {\r\n                    const script = document.createElement(\"script\");\r\n                    script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places`;\r\n                    script.async = true;\r\n                    script.defer = true;\r\n                    script.onload = initializeMap;\r\n                    document.head.appendChild(script);\r\n                } else {\r\n                    initializeMap();\r\n                }\r\n            };\r\n\r\n            const initializeMap = () => {\r\n                const defaultLocation = { lat: 10.0, lng: 76.0 };\r\n\r\n                const mapInstance = new window.google.maps.Map(document.getElementById(\"map\"), {\r\n                    center: defaultLocation,\r\n                    zoom: 12,\r\n                });\r\n\r\n                const input = document.getElementById(\"autocomplete\");\r\n                const autocomplete = new window.google.maps.places.Autocomplete(input);\r\n                \r\n                autocomplete.addListener(\"place_changed\", () => {\r\n                    const place = autocomplete.getPlace();\r\n                    if (place.geometry) {\r\n                        const lat = place.geometry.location.lat();\r\n                        const lng = place.geometry.location.lng();\r\n\r\n                        setCredentials(prev => ({\r\n                            ...prev,\r\n                            address: place.formatted_address,\r\n                            latitude: lat,\r\n                            longitude: lng\r\n                        }));\r\n\r\n                        mapInstance.setCenter({ lat, lng });\r\n                        mapInstance.setZoom(15);\r\n\r\n                        if (marker) marker.setMap(null); // Remove previous marker\r\n\r\n                        const newMarker = new window.google.maps.Marker({\r\n                            position: { lat, lng },\r\n                            map: mapInstance,\r\n                        });\r\n\r\n                        setMarker(newMarker);\r\n                    }\r\n                });\r\n\r\n                setMap(mapInstance);\r\n            };\r\n\r\n            loadGoogleMapsScript();\r\n        }\r\n    }, [selectedRole]);\r\n\r\n    // Clear form when modalType changes\r\n    useEffect(() => {\r\n        resetForm();\r\n    }, [modalType]);\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        // Validate form before submission - only for signup\r\n        if (!validateForm()) {\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            if (modalType === \"login\") {\r\n                const res = await axios.post(`http://localhost:5000/api/auth/login`, credentials);\r\n                setUser({ id: res.data.account._id, email: res.data.account.email, role: res.data.account.role });\r\n                setShowSuccessModal(\"login\");\r\n                setTimeout(() => {\r\n                    setShowModal(false);\r\n                    navigate(`/dashboard/${res.data.account.role}`);\r\n                }, 2000);\r\n            } else {\r\n                await axios.post(`http://localhost:5000/api/auth/register`, { ...credentials, role: selectedRole });\r\n                setShowSuccessModal(\"signup\");\r\n                setTimeout(() => {\r\n                    resetForm();\r\n                    setModalType(\"login\");\r\n                    setShowSuccessModal(false);\r\n                }, 2000);\r\n            }\r\n        } catch (err) {\r\n            alert(\"Error: \" + (err.response ? err.response.data.message : err.message));\r\n        }\r\n    };\r\n    \r\n    // Handle password input change with validation\r\n    const handlePasswordChange = (e) => {\r\n        const value = e.target.value;\r\n        handleChange(e);\r\n        \r\n        // Only validate password during signup\r\n        if (modalType === \"signup\" && value.length > 0 && !validatePassword(value)) {\r\n            setValidationAlert(\"Password must be at least 8 characters with a capital letter, number, and special character\");\r\n        } else {\r\n            setValidationAlert(null);\r\n        }\r\n    };\r\n    \r\n    // Handle phone input change with validation\r\n    const handlePhoneChange = (e) => {\r\n        // Only allow numeric input\r\n        const value = e.target.value.replace(/\\D/g, '');\r\n        \r\n        // Update form state with cleaned value\r\n        setCredentials({ ...credentials, phone: value });\r\n        \r\n        // Update input field with cleaned value\r\n        e.target.value = value;\r\n        \r\n        // Only validate phone during signup\r\n        if (modalType === \"signup\" && value.length > 0 && value.length !== 10) {\r\n            setValidationAlert(\"Phone number must be exactly 10 digits\");\r\n        } else {\r\n            setValidationAlert(null);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {showSuccessModal && <SuccessModal type={showSuccessModal} onClose={() => setShowSuccessModal(false)} />}\r\n\r\n            <div className=\"modal-overlay-xjkl\">\r\n                <div className=\"modal-container-xjkl\">\r\n                    {/* Left Image Section */}\r\n                    <div className=\"modal-image-xjkl\">\r\n                        <img src={image} alt=\"Illustration\" />\r\n                    </div>\r\n\r\n                    {/* Right Form Section */}\r\n                    <div className=\"modal-content-xjkl\">\r\n                        <span className=\"close-btn-xjkl\" onClick={() => setShowModal(false)}>×</span>\r\n                        <h2>{modalType === \"login\" ? \"Login\" : \"Sign Up\"}</h2>\r\n\r\n                        {/* Validation Alert Popup - only show during signup */}\r\n                        {validationAlert && (\r\n                            <div className=\"validation-alert\">\r\n                                <p>{validationAlert}</p>\r\n                                <button onClick={() => setValidationAlert(null)}>OK</button>\r\n                            </div>\r\n                        )}\r\n\r\n                        {modalType === \"signup\" && (\r\n                            <div className=\"role-selection\">\r\n                                <h3>Select Role:</h3>\r\n                                <div className=\"role-icons\">\r\n                                    <div className={`role-icon ${selectedRole === \"user\" ? \"selected\" : \"\"}`} onClick={() => setSelectedRole(\"user\")}>\r\n                                        <FaUser size={40} />\r\n                                        <span>User</span>\r\n                                    </div>\r\n                                    <div className={`role-icon ${selectedRole === \"restaurant\" ? \"selected\" : \"\"}`} onClick={() => setSelectedRole(\"restaurant\")}>\r\n                                        <FaUtensils size={40} />\r\n                                        <span>Restaurant</span>\r\n                                    </div>\r\n                                    <div className={`role-icon ${selectedRole === \"deliveryboy\" ? \"selected\" : \"\"}`} onClick={() => setSelectedRole(\"deliveryboy\")}>\r\n                                        <FaMotorcycle size={40} />\r\n                                        <span>Delivery Boy</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {modalType === \"signup\" && !selectedRole ? (\r\n                            <p style={{ textAlign: \"center\", color: \"red\" }}>Please select a role to continue.</p>\r\n                        ) : (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <input \r\n                                    type=\"email\" \r\n                                    name=\"email\" \r\n                                    placeholder=\"Email\" \r\n                                    onChange={handleChange} \r\n                                    required \r\n                                />\r\n\r\n                                <input \r\n                                    type=\"password\" \r\n                                    name=\"password\" \r\n                                    placeholder=\"Password\" \r\n                                    onChange={handlePasswordChange}\r\n                                    onBlur={(e) => {\r\n                                        // Only validate password during signup\r\n                                        if (modalType === \"signup\" && e.target.value.length > 0 && !validatePassword(e.target.value)) {\r\n                                            setValidationAlert(\"Password must be at least 8 characters with a capital letter, number, and special character\");\r\n                                        }\r\n                                    }}\r\n                                    required \r\n                                />\r\n                               \r\n                                {modalType === \"signup\" && (\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        name=\"name\" \r\n                                        placeholder=\"Full Name\" \r\n                                        onChange={handleChange} \r\n                                        required \r\n                                    />\r\n                                )}\r\n                                \r\n                                {modalType === \"signup\" && selectedRole === \"user\" && (\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        name=\"phone\" \r\n                                        placeholder=\"Phone number (10 digits)\" \r\n                                        onChange={handlePhoneChange}\r\n                                        onBlur={(e) => {\r\n                                            if (e.target.value.length > 0 && !validatePhone(e.target.value)) {\r\n                                                setValidationAlert(\"Phone number must be exactly 10 digits\");\r\n                                            }\r\n                                        }}\r\n                                        maxLength=\"10\"\r\n                                        required \r\n                                    />\r\n                                )}\r\n\r\n                                {/* Extra fields for Restaurant */}\r\n                                {modalType === \"signup\" && selectedRole === \"restaurant\" && (\r\n                                    <div className=\"map-container\">\r\n                                        <h4>Select Your Restaurant Location:</h4>\r\n                                        <input \r\n                                            id=\"autocomplete\" \r\n                                            type=\"text\" \r\n                                            placeholder=\"Search for your location...\" \r\n                                        />\r\n                                        <div id=\"map\" style={{ width: \"100%\", height: \"300px\", marginTop: \"10px\" }}></div>\r\n                                        {credentials.address && <p><strong>Address:</strong> {credentials.address}</p>}\r\n                                    </div>\r\n                                )}\r\n                                 {/* Extra fields for Delivery Boy */}\r\n                                 {selectedRole === \"deliveryboy\" && (\r\n                                    <input type=\"text\" name=\"assignedRegion\" placeholder=\"Assigned Region\" onChange={handleChange} required />\r\n                                )}\r\n\r\n                                <button type=\"submit\" disabled={modalType === \"signup\" && !selectedRole}>\r\n                                    {modalType === \"login\" ? \"Login\" : `Sign Up as ${selectedRole ? selectedRole.charAt(0).toUpperCase() + selectedRole.slice(1) : \"?\"}`}\r\n                                </button>\r\n                            </form>\r\n                        )}\r\n\r\n                        <p>\r\n                            {modalType === \"login\" ? \"New here?\" : \"Already have an account?\"}\r\n                            <span onClick={() => setModalType(modalType === \"login\" ? \"signup\" : \"login\")}>\r\n                                {modalType === \"login\" ? \" Create an account\" : \" Log in\"}\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}